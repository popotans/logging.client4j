/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package logging.client;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-11")
public class TLogPackage implements org.apache.thrift.TBase<TLogPackage, TLogPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TLogPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLogPackage");

  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("IP", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("AppId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOG_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("LogItems", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField METRIC_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("MetricItems", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLogPackageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLogPackageTupleSchemeFactory());
  }

  public long IP; // required
  public int AppId; // required
  public List<TLogEntity> LogItems; // required
  public List<TMetricEntity> MetricItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IP((short)1, "IP"),
    APP_ID((short)2, "AppId"),
    LOG_ITEMS((short)3, "LogItems"),
    METRIC_ITEMS((short)4, "MetricItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IP
          return IP;
        case 2: // APP_ID
          return APP_ID;
        case 3: // LOG_ITEMS
          return LOG_ITEMS;
        case 4: // METRIC_ITEMS
          return METRIC_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IP_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("IP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("AppId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOG_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("LogItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLogEntity.class))));
    tmpMap.put(_Fields.METRIC_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("MetricItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMetricEntity.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLogPackage.class, metaDataMap);
  }

  public TLogPackage() {
  }

  public TLogPackage(
    long IP,
    int AppId,
    List<TLogEntity> LogItems,
    List<TMetricEntity> MetricItems)
  {
    this();
    this.IP = IP;
    setIPIsSet(true);
    this.AppId = AppId;
    setAppIdIsSet(true);
    this.LogItems = LogItems;
    this.MetricItems = MetricItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLogPackage(TLogPackage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.IP = other.IP;
    this.AppId = other.AppId;
    if (other.isSetLogItems()) {
      List<TLogEntity> __this__LogItems = new ArrayList<TLogEntity>(other.LogItems.size());
      for (TLogEntity other_element : other.LogItems) {
        __this__LogItems.add(new TLogEntity(other_element));
      }
      this.LogItems = __this__LogItems;
    }
    if (other.isSetMetricItems()) {
      List<TMetricEntity> __this__MetricItems = new ArrayList<TMetricEntity>(other.MetricItems.size());
      for (TMetricEntity other_element : other.MetricItems) {
        __this__MetricItems.add(new TMetricEntity(other_element));
      }
      this.MetricItems = __this__MetricItems;
    }
  }

  public TLogPackage deepCopy() {
    return new TLogPackage(this);
  }

//  @Override
  public void clear() {
    setIPIsSet(false);
    this.IP = 0;
    setAppIdIsSet(false);
    this.AppId = 0;
    this.LogItems = null;
    this.MetricItems = null;
  }

  public long getIP() {
    return this.IP;
  }

  public TLogPackage setIP(long IP) {
    this.IP = IP;
    setIPIsSet(true);
    return this;
  }

  public void unsetIP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IP_ISSET_ID);
  }

  /** Returns true if field IP is set (has been assigned a value) and false otherwise */
  public boolean isSetIP() {
    return EncodingUtils.testBit(__isset_bitfield, __IP_ISSET_ID);
  }

  public void setIPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IP_ISSET_ID, value);
  }

  public int getAppId() {
    return this.AppId;
  }

  public TLogPackage setAppId(int AppId) {
    this.AppId = AppId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field AppId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public int getLogItemsSize() {
    return (this.LogItems == null) ? 0 : this.LogItems.size();
  }

  public java.util.Iterator<TLogEntity> getLogItemsIterator() {
    return (this.LogItems == null) ? null : this.LogItems.iterator();
  }

  public void addToLogItems(TLogEntity elem) {
    if (this.LogItems == null) {
      this.LogItems = new ArrayList<TLogEntity>();
    }
    this.LogItems.add(elem);
  }

  public List<TLogEntity> getLogItems() {
    return this.LogItems;
  }

  public TLogPackage setLogItems(List<TLogEntity> LogItems) {
    this.LogItems = LogItems;
    return this;
  }

  public void unsetLogItems() {
    this.LogItems = null;
  }

  /** Returns true if field LogItems is set (has been assigned a value) and false otherwise */
  public boolean isSetLogItems() {
    return this.LogItems != null;
  }

  public void setLogItemsIsSet(boolean value) {
    if (!value) {
      this.LogItems = null;
    }
  }

  public int getMetricItemsSize() {
    return (this.MetricItems == null) ? 0 : this.MetricItems.size();
  }

  public java.util.Iterator<TMetricEntity> getMetricItemsIterator() {
    return (this.MetricItems == null) ? null : this.MetricItems.iterator();
  }

  public void addToMetricItems(TMetricEntity elem) {
    if (this.MetricItems == null) {
      this.MetricItems = new ArrayList<TMetricEntity>();
    }
    this.MetricItems.add(elem);
  }

  public List<TMetricEntity> getMetricItems() {
    return this.MetricItems;
  }

  public TLogPackage setMetricItems(List<TMetricEntity> MetricItems) {
    this.MetricItems = MetricItems;
    return this;
  }

  public void unsetMetricItems() {
    this.MetricItems = null;
  }

  /** Returns true if field MetricItems is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricItems() {
    return this.MetricItems != null;
  }

  public void setMetricItemsIsSet(boolean value) {
    if (!value) {
      this.MetricItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IP:
      if (value == null) {
        unsetIP();
      } else {
        setIP((Long)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case LOG_ITEMS:
      if (value == null) {
        unsetLogItems();
      } else {
        setLogItems((List<TLogEntity>)value);
      }
      break;

    case METRIC_ITEMS:
      if (value == null) {
        unsetMetricItems();
      } else {
        setMetricItems((List<TMetricEntity>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IP:
      return Long.valueOf(getIP());

    case APP_ID:
      return Integer.valueOf(getAppId());

    case LOG_ITEMS:
      return getLogItems();

    case METRIC_ITEMS:
      return getMetricItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IP:
      return isSetIP();
    case APP_ID:
      return isSetAppId();
    case LOG_ITEMS:
      return isSetLogItems();
    case METRIC_ITEMS:
      return isSetMetricItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLogPackage)
      return this.equals((TLogPackage)that);
    return false;
  }

  public boolean equals(TLogPackage that) {
    if (that == null)
      return false;

    boolean this_present_IP = true;
    boolean that_present_IP = true;
    if (this_present_IP || that_present_IP) {
      if (!(this_present_IP && that_present_IP))
        return false;
      if (this.IP != that.IP)
        return false;
    }

    boolean this_present_AppId = true;
    boolean that_present_AppId = true;
    if (this_present_AppId || that_present_AppId) {
      if (!(this_present_AppId && that_present_AppId))
        return false;
      if (this.AppId != that.AppId)
        return false;
    }

    boolean this_present_LogItems = true && this.isSetLogItems();
    boolean that_present_LogItems = true && that.isSetLogItems();
    if (this_present_LogItems || that_present_LogItems) {
      if (!(this_present_LogItems && that_present_LogItems))
        return false;
      if (!this.LogItems.equals(that.LogItems))
        return false;
    }

    boolean this_present_MetricItems = true && this.isSetMetricItems();
    boolean that_present_MetricItems = true && that.isSetMetricItems();
    if (this_present_MetricItems || that_present_MetricItems) {
      if (!(this_present_MetricItems && that_present_MetricItems))
        return false;
      if (!this.MetricItems.equals(that.MetricItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_IP = true;
    list.add(present_IP);
    if (present_IP)
      list.add(IP);

    boolean present_AppId = true;
    list.add(present_AppId);
    if (present_AppId)
      list.add(AppId);

    boolean present_LogItems = true && (isSetLogItems());
    list.add(present_LogItems);
    if (present_LogItems)
      list.add(LogItems);

    boolean present_MetricItems = true && (isSetMetricItems());
    list.add(present_MetricItems);
    if (present_MetricItems)
      list.add(MetricItems);

    return list.hashCode();
  }

//  @Override
  public int compareTo(TLogPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIP()).compareTo(other.isSetIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IP, other.IP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AppId, other.AppId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogItems()).compareTo(other.isSetLogItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogItems, other.LogItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricItems()).compareTo(other.isSetMetricItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MetricItems, other.MetricItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLogPackage(");
    boolean first = true;

    sb.append("IP:");
    sb.append(this.IP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("AppId:");
    sb.append(this.AppId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LogItems:");
    if (this.LogItems == null) {
      sb.append("null");
    } else {
      sb.append(this.LogItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MetricItems:");
    if (this.MetricItems == null) {
      sb.append("null");
    } else {
      sb.append(this.MetricItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLogPackageStandardSchemeFactory implements SchemeFactory {
    public TLogPackageStandardScheme getScheme() {
      return new TLogPackageStandardScheme();
    }
  }

  private static class TLogPackageStandardScheme extends StandardScheme<TLogPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLogPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.IP = iprot.readI64();
              struct.setIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.AppId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOG_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.LogItems = new ArrayList<TLogEntity>(_list20.size);
                TLogEntity _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = new TLogEntity();
                  _elem21.read(iprot);
                  struct.LogItems.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setLogItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METRIC_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.MetricItems = new ArrayList<TMetricEntity>(_list23.size);
                TMetricEntity _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = new TMetricEntity();
                  _elem24.read(iprot);
                  struct.MetricItems.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setMetricItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLogPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IP_FIELD_DESC);
      oprot.writeI64(struct.IP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeI32(struct.AppId);
      oprot.writeFieldEnd();
      if (struct.LogItems != null) {
        oprot.writeFieldBegin(LOG_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.LogItems.size()));
          for (TLogEntity _iter26 : struct.LogItems)
          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MetricItems != null) {
        oprot.writeFieldBegin(METRIC_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MetricItems.size()));
          for (TMetricEntity _iter27 : struct.MetricItems)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLogPackageTupleSchemeFactory implements SchemeFactory {
    public TLogPackageTupleScheme getScheme() {
      return new TLogPackageTupleScheme();
    }
  }

  private static class TLogPackageTupleScheme extends TupleScheme<TLogPackage> {

//    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLogPackage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIP()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetLogItems()) {
        optionals.set(2);
      }
      if (struct.isSetMetricItems()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIP()) {
        oprot.writeI64(struct.IP);
      }
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.AppId);
      }
      if (struct.isSetLogItems()) {
        {
          oprot.writeI32(struct.LogItems.size());
          for (TLogEntity _iter28 : struct.LogItems)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetMetricItems()) {
        {
          oprot.writeI32(struct.MetricItems.size());
          for (TMetricEntity _iter29 : struct.MetricItems)
          {
            _iter29.write(oprot);
          }
        }
      }
    }

//    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLogPackage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.IP = iprot.readI64();
        struct.setIPIsSet(true);
      }
      if (incoming.get(1)) {
        struct.AppId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.LogItems = new ArrayList<TLogEntity>(_list30.size);
          TLogEntity _elem31;
          for (int _i32 = 0; _i32 < _list30.size; ++_i32)
          {
            _elem31 = new TLogEntity();
            _elem31.read(iprot);
            struct.LogItems.add(_elem31);
          }
        }
        struct.setLogItemsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MetricItems = new ArrayList<TMetricEntity>(_list33.size);
          TMetricEntity _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = new TMetricEntity();
            _elem34.read(iprot);
            struct.MetricItems.add(_elem34);
          }
        }
        struct.setMetricItemsIsSet(true);
      }
    }
  }

}

